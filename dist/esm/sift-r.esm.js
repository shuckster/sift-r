/*
 * sift-r
 * v1.3.3
 * https://github.com/shuckster/sift-r
 * License: MIT
 */
var S=Object.defineProperty,v=Object.defineProperties;var w=Object.getOwnPropertyDescriptors;var j=Object.getOwnPropertySymbols;var x=Object.prototype.hasOwnProperty,M=Object.prototype.propertyIsEnumerable;var P=(n,t,s)=>t in n?S(n,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[t]=s,c=(n,t)=>{for(var s in t||(t={}))x.call(t,s)&&P(n,s,t[s]);if(j)for(var s of j(t))M.call(t,s)&&P(n,s,t[s]);return n},f=(n,t)=>v(n,w(t));import*as A from"match-iz";const{match:g,against:h,when:e,otherwise:u}=A,{not:T,allOf:l,firstOf:k,every:d,gte:F}=A,{isArray:i,isPojo:y,isFunction:q,isString:z}=A,b=l(i,d(i),d({length:2})),C=l(y,n=>b(Object.values(n)));function Q(n,...t){return g([n,...t])(e([C])(I),e([y,y])(O),e([y,q])(J),e([y,i])(L),e([b])(D),e([i,i])(m),e([i,T(i)])(G),e(l(k(i),{length:F(2)}))(H),e([y])(([s])=>[{},s]),e([i])(([s])=>[[],s]),u(([s])=>[void 0,s]))}const R=n=>h(e(n,t=>t),u(void 0)),m=([n,t])=>n.reduce(([s,r],o,a)=>g(o)(e(t[a])(E=>[[...s,E],r]),u(()=>[s,[...r,o]])),[[],[]]),D=([n])=>m(n.reduce(([t,s],[r,o])=>[[...t,o],[...s,r]],[[],[]])),G=([n,t])=>m([n,Array.from({length:n.length}).fill(t)]),H=([n,...t])=>{const s=Array.from({length:t.length}).map(()=>[]),r=[];return n.forEach(h(...t.map((o,a)=>e(o)(p(s[a]))),u(p(r)))),[...s,r]},O=([n,t])=>Object.entries(n).reduce(([s,r],[o,a])=>g(a)(e(t[o])(()=>[f(c({},s),{[o]:a}),r]),u(()=>[s,f(c({},r),{[o]:a})])),[{},{}]),I=([n])=>O(Object.entries(n).reduce(([t,s],[r,[o,a]])=>[f(c({},t),{[r]:a}),f(c({},s),{[r]:o})],[{},{}])),J=([n,t])=>O([n,Object.keys(n).reduce((s,r)=>f(c({},s),{[r]:t}),{})]),L=([n,t])=>{const s=Array.from({length:t.length}).map(()=>({})),r={};return Object.entries(n).forEach(h(...t.map((o,a)=>e([z,o])(B(s[a]))),u(B(r)))),[...s,r]};function p(n){return t=>n.push(t)}function B(n){return([t,s])=>Object.assign(n,{[t]:s})}export{R as byPattern,Q as sift};
