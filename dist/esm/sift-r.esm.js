/*
 * sift-r
 * v1.3.2
 * https://github.com/shuckster/sift-r
 * License: MIT
 */
var S=Object.defineProperty,v=Object.defineProperties;var w=Object.getOwnPropertyDescriptors;var P=Object.getOwnPropertySymbols;var x=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;var d=(s,t,n)=>t in s?S(s,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):s[t]=n,f=(s,t)=>{for(var n in t||(t={}))x.call(t,n)&&d(s,n,t[n]);if(P)for(var n of P(t))E.call(t,n)&&d(s,n,t[n]);return s},u=(s,t)=>v(s,w(t));import*as g from"match-iz";const{match:h,against:l,when:a,otherwise:y}=g,{not:M,allOf:m,firstOf:T,every:b,gte:k}=g,{isArray:c,isPojo:A,isFunction:F,isString:q}=g,p=m(c,b(c),b({length:2})),z=m(A,s=>p(Object.values(s)));function N(s,...t){return h([s,...t])(a([z])(H),a([A,A])(j),a([A,F])(I),a([A,c])(J),a([p])(C),a([c,c])(O),a([c,M(c)])(D),a(m(T(c),{length:k(2)}))(G),a([A])(([n])=>[{},n]),a([c])(([n])=>[[],n]),y(([n])=>[void 0,n]))}const Q=s=>l(a(s,t=>t),y(void 0)),O=([s,t])=>s.reduce(([n,r],e,o)=>h(e)(a(t[o])(i=>[[...n,i],r]),y(()=>[n,[...r,e]])),[[],[]]),C=([s])=>O(s.reduce(([t,n],[r,e])=>[[...t,e],[...n,r]],[[],[]])),D=([s,t])=>O([s,Array.from({length:s.length}).fill(t)]),G=([s,...t])=>{const n=Array.from({length:t.length}).map(()=>[]),r=[];return s.forEach(l(...t.map((o,i)=>a(o)(e(n[i]))),y(e(r)))),[...n,r];function e(o){return i=>o.push(i)}},j=([s,t])=>Object.entries(s).reduce(([n,r],[e,o])=>h(o)(a(t[e])(()=>[u(f({},n),{[e]:o}),r]),y(()=>[n,u(f({},r),{[e]:o})])),[{},{}]),H=([s])=>j(Object.entries(s).reduce(([t,n],[r,[e,o]])=>[u(f({},t),{[r]:o}),u(f({},n),{[r]:e})],[{},{}])),I=([s,t])=>j([s,Object.keys(s).reduce((n,r)=>u(f({},n),{[r]:t}),{})]),J=([s,t])=>{const n=Array.from({length:t.length}).map(()=>({})),r={};return Object.entries(s).forEach(l(...t.map((o,i)=>a([q,o])(e(n[i]))),y(e(r)))),[...n,r];function e(o){return([i,B])=>Object.assign(o,{[i]:B})}};export{Q as byPattern,N as sift};
