/*
 * sift-r
 * v1.2.2
 * https://github.com/shuckster/sift-r
 * License: MIT
 */
var S=Object.defineProperty,v=Object.defineProperties;var w=Object.getOwnPropertyDescriptors;var j=Object.getOwnPropertySymbols;var E=Object.prototype.hasOwnProperty,M=Object.prototype.propertyIsEnumerable;var P=(s,n,t)=>n in s?S(s,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[n]=t,f=(s,n)=>{for(var t in n||(n={}))E.call(n,t)&&P(s,t,n[t]);if(j)for(var t of j(n))M.call(n,t)&&P(s,t,n[t]);return s},u=(s,n)=>v(s,w(n));import*as g from"match-iz";const{match:h,against:d,when:a,otherwise:A}=g,{not:T,allOf:l,firstOf:k,every:b,gte:x}=g,{isArray:c,isPojo:y,isFunction:F,isString:q}=g,p=l(c,b(c),b({length:2})),z=l(y,s=>p(Object.values(s)));function N(s,...n){return h([s,...n])(a([z])(H),a([y,y])(O),a([y,F])(I),a([y,c])(J),a([p])(C),a([c,c])(m),a([c,T(c)])(D),a(l(k(c),{length:x(2)}))(G),a([y])(([t])=>[{},t]),a([c])(([t])=>[[],t]),A(([t])=>[void 0,t]))}const m=([s,n])=>s.reduce(([t,r],e,o)=>h(e)(a(n[o])(i=>[[...t,i],r]),A(()=>[t,[...r,e]])),[[],[]]),C=([s])=>m(s.reduce(([n,t],[r,e])=>[[...n,e],[...t,r]],[[],[]])),D=([s,n])=>m([s,Array.from({length:s.length}).fill(n)]),G=([s,...n])=>{const t=Array.from({length:n.length}).map(()=>[]),r=[];return s.forEach(d(...n.map((o,i)=>a(o)(e(t[i]))),A(e(r)))),[...t,r];function e(o){return i=>o.push(i)}},O=([s,n])=>Object.entries(s).reduce(([t,r],[e,o])=>h(o)(a(n[e])(()=>[u(f({},t),{[e]:o}),r]),A(()=>[t,u(f({},r),{[e]:o})])),[{},{}]),H=([s])=>O(Object.entries(s).reduce(([n,t],[r,[e,o]])=>[u(f({},n),{[r]:o}),u(f({},t),{[r]:e})],[{},{}])),I=([s,n])=>O([s,Object.keys(s).reduce((t,r)=>u(f({},t),{[r]:n}),{})]),J=([s,n])=>{const t=Array.from({length:n.length}).map(()=>({})),r={};return Object.entries(s).forEach(d(...n.map((o,i)=>a([q,o])(e(t[i]))),A(e(r)))),[...t,r];function e(o){return([i,B])=>Object.assign(o,{[i]:B})}};export{N as sift};
