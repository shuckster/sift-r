/*
 * sift-r
 * v1.2.1
 * https://github.com/shuckster/sift-r
 * License: MIT
 */
var p=Object.defineProperty,B=Object.defineProperties;var S=Object.getOwnPropertyDescriptors;var j=Object.getOwnPropertySymbols;var w=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;var l=(t,n,s)=>n in t?p(t,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[n]=s,f=(t,n)=>{for(var s in n||(n={}))w.call(n,s)&&l(t,s,n[s]);if(j)for(var s of j(n))E.call(n,s)&&l(t,s,n[s]);return t},y=(t,n)=>B(t,S(n));import*as g from"match-iz";const{match:h,against:P,when:i,otherwise:A}=g,{not:M,allOf:T,firstOf:k,gte:x}=g,{isArray:a,isPojo:u,isFunction:F,isString:q}=g,d=t=>a(t)&&t.every(a)&&t.every(n=>n.length===2),v=t=>u(t)&&d(Object.values(t));function L(t,...n){return h([t,...n])(i([v])(G),i([u,u])(O),i([u,F])(H),i([u,a])(I),i([d])(z),i([a,a])(m),i([a,M(a)])(C),i(T(k(a),{length:x(2)}))(D),i([u])(([s])=>[{},s]),i([a])(([s])=>[[],s]),A(([s])=>[void 0,s]))}const m=([t,n])=>t.reduce(([s,r],e,o)=>h(e)(i(n[o])(()=>[[...s,e],r]),A(()=>[s,[...r,e]])),[[],[]]),z=([t])=>m(t.reduce(([n,s],[r,e])=>[[...n,e],[...s,r]],[[],[]])),C=([t,n])=>m([t,Array.from({length:t.length}).fill(n)]),D=([t,...n])=>{const s=Array.from({length:n.length}).map(()=>[]),r=[];return t.forEach(P(...n.map((o,c)=>i(o)(e(s[c]))),A(e(r)))),[...s,r];function e(o){return c=>o.push(c)}},O=([t,n])=>Object.entries(t).reduce(([s,r],[e,o])=>h(o)(i(n[e])(()=>[y(f({},s),{[e]:o}),r]),A(()=>[s,y(f({},r),{[e]:o})])),[{},{}]),G=([t])=>O(Object.entries(t).reduce(([n,s],[r,[e,o]])=>[y(f({},n),{[r]:o}),y(f({},s),{[r]:e})],[{},{}])),H=([t,n])=>O([t,Object.keys(t).reduce((s,r)=>y(f({},s),{[r]:n}),{})]),I=([t,n])=>{const s=Array.from({length:n.length}).map(()=>({})),r={};return Object.entries(t).forEach(P(...n.map((o,c)=>i([q,o])(e(s[c]))),A(e(r)))),[...s,r];function e(o){return([c,b])=>Object.assign(o,{[c]:b})}};export{L as sift};
